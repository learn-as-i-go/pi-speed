#!/usr/bin/python3

# Import necessary modules
import os
import sys
from time import *
from decimal import *
import serial
import threading
import re
import pygame
from pygame.locals import *
from datetime import datetime, timedelta
from picamera import PiCamera  # Added for Pi Camera
import csv  # Added for CSV

# Ops241A module settings
Ops241A_Speed_Output_Units = 'US'
Ops241A_Speed_Output_Units_lbl = 'mph'
Ops241A_Blanks_Pref_Zero = 'BZ'
Ops241A_Min_Reported_Speed = 'R>5\n'
Ops241A_Sampling_Frequency = 'SV'
Ops241A_Transmit_Power = 'PD'    # mid power
Ops241A_Threshold_Control = 'MX' # 1000 magnitude-square
Ops241A_Module_Information = '??'

logo_height = 73
logo_width = 400

use_LCD = True
if use_LCD:
    # Display screen width and height
    os.environ['SDL_VIDEODRIVER'] = 'fbcon'
    os.environ["SDL_FBDEV"] = "/dev/fb1"
    screen_size = (480, 320)
else:
    print("Not configured for TFT display")
    screen_size = (640, 480)

# Initialize pygame graphics and sound
print("Initializing pygame graphics")
pygame.init()
pygame.display.init()
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
screen = pygame.display.set_mode(screen_size)
screen_size_width = screen_size[0]
screen_size_height = screen_size[1]
units_lbl_font_size = int(screen_size_width / 10)
pygame.display.set_caption("OmniPreSense Radar")

# Initialize the display
screen_bkgnd_color = (0x30, 0x39, 0x86)
screen.fill(screen_bkgnd_color)
logo = pygame.image.load('/home/pi/OPS241A_RasPiLCD/ops_logo_400x73.jpg')
logo_x = (screen_size_width - logo_width) / 2
screen.blit(logo, (logo_x, 1))

speed_font_size = 180
speed_font_name = "Consolas"
speed_font = pygame.font.SysFont(speed_font_name, speed_font_size, True, False)
speed_col = int(screen_size[0] / 4)
speed_row = logo_height + int(speed_font_size * 0.3)

units_lbl_font = pygame.font.SysFont(speed_font_name, units_lbl_font_size, True, False)
units_lbl = units_lbl_font.render("mph", True, WHITE)
units_lbl_col = int(3 * (screen_size[0] / 4))
units_lbl_row = (speed_row + speed_font_size) - (2 * units_lbl_font_size)
screen.blit(units_lbl, [units_lbl_col, units_lbl_row])

# Update screen
pygame.display.flip()

# Initialize the USB port to read from the OPS-241A module
ser = serial.Serial(
    port='/dev/ttyACM0',
    baudrate=9600,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS,
    timeout=2,  # Increased timeout
    writeTimeout=3
)
ser.flushInput()
ser.flushOutput()

# Initialize camera
camera = PiCamera()  # Initialize Pi Camera
camera.resolution = (1024, 768)  # Set resolution
camera.rotation = 180  # Adjust camera rotation if necessary

# Define the path to the CSV file and ensure the directory exists
csv_directory = '/home/pi/OPS241A_RasPiLCD/data/'
csv_file_path = os.path.join(csv_directory, 'speed_data.csv')

# Ensure the directory exists, create it if it does not
if not os.path.exists(csv_directory):
    os.makedirs(csv_directory)

# Write the CSV header if the file is new or empty
if not os.path.exists(csv_file_path) or os.stat(csv_file_path).st_size == 0:
    with open(csv_file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Timestamp", "Speed (mph)", "Image Path"])

# Function to capture image
def capture_image(image_path):
    camera.capture(image_path)
    print(f"Photo captured: {image_path}")

# Function for sending commands to the OPS-241A module
def send_serial_cmd(print_prefix, command):
    data_for_send_str = command
    data_for_send_bytes = str.encode(data_for_send_str)
    print(print_prefix, command)
    ser.write(data_for_send_bytes)
    ser_write_verify = False
    ser_message_start = '{'
    while not ser_write_verify:
        data_rx_bytes = ser.readline()
        if len(data_rx_bytes) != 0:
            data_rx_str = str(data_rx_bytes)
            if data_rx_str.find(ser_message_start):
                ser_write_verify = True

# Initialize and query Ops241A Module
print("\nInitializing Ops241A Module")
send_serial_cmd("\nSet Speed Output Units: ", Ops241A_Speed_Output_Units)
send_serial_cmd("\nSet Sampling Frequency: ", Ops241A_Sampling_Frequency)
send_serial_cmd("\nSet Transmit Power: ", Ops241A_Transmit_Power)
send_serial_cmd("\nSet Threshold Control: ", Ops241A_Threshold_Control)
send_serial_cmd("\nSet Blanks Preference: ", Ops241A_Blanks_Pref_Zero)
send_serial_cmd("\nSet Reported MinSpeed: ", Ops241A_Min_Reported_Speed)

done = False
while not done:
    speed_available = False  # Reset for each iteration
    try:
        Ops241_rx_bytes = ser.readline()
        
        if len(Ops241_rx_bytes) == 0:
            print("No data received from OPS241A")
            continue
        
        Ops241_rx_str = str(Ops241_rx_bytes)
        print("RX:" + Ops241_rx_str)
        
        if Ops241_rx_str.find('{') == -1:
            try:
                Ops241_rx_float = float(Ops241_rx_bytes)
                speed_available = True
            except ValueError:
                print("Unable to convert to a number: " + Ops241_rx_str)
                speed_available = False

        if speed_available:
            pygame.draw.rect(screen, screen_bkgnd_color,
                             (speed_col, speed_row, screen_size_width - speed_col, speed_font_size), 0)
            speed_rnd = round(Ops241_rx_float, 1)
            speed_str = str(speed_rnd)
            
            if speed_rnd < 0:
                speed_rend = speed_font.render(speed_str, True, WHITE)
            elif speed_rnd > 0:
                speed_rend = speed_font.render(speed_str, True, RED)
                # Create a thread to handle image capture
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                image_path = f"/home/pi/OPS241A_RasPiLCD/images/car_{timestamp}_{speed_str}.jpg"
                image_thread = threading.Thread(target=capture_image, args=(image_path,))
                image_thread.start()
                
                # Save the data to the CSV file
                with open(csv_file_path, mode='a', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow([timestamp, speed_str, image_path])
                print(f"Data saved: Timestamp={timestamp}, Speed={speed_str}, Image={image_path}")
            else:
                speed_rend = speed_font.render(speed_str, True, WHITE)

            screen.blit(speed_rend, [speed_col, speed_row])
            screen.blit(units_lbl, [units_lbl_col, units_lbl_row])

            # Update screen
            pygame.display.flip()

    except serial.SerialException as e:
        print(f"Serial exception: {e}")
        ser.flushInput()  # Clear the buffer and try again
        continue

        # Update screen
        pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            camera.close()  # Ensure camera closes properly
            exit()
